import numpy as np
import pandas as pd
from math import log
from scipy.optimize import least_squares
import re
import matplotlib.pyplot as plt

def y(theta, t):
    """Logistic growth function."""
    return theta[0] / (1 + np.exp(-theta[1] * (t - theta[2])))

def fit(dt, end_year=None):
    """Fit logistic growth model."""
    xs = dt['Year'].to_numpy()
    ys = dt['Value'].to_numpy()
    if end_year is not None:
        xs = xs[xs <= end_year]  # Filter by the specified end year
        ys = ys[:len(xs)]  # Ensure corresponding values
    if len(xs) == 0 or len(ys) == 0:
        return pd.DataFrame()  # Return empty if no data for fitting
    my = max(xs)
    mv = max(ys)
    def fun(theta):
        return y(theta, xs) - ys
    theta0 = [mv, 0.3, my - 5]
    res1 = least_squares(fun, theta0, max_nfev=10000)  # Logistic fitting
    if res1.success and res1.x[0] > 0 and res1.x[1] > 0:  # Ensure valid parameters
        yr = my if res1.x[2] > my else round(res1.x[2])
        mat = y([1, res1.x[1], res1.x[2]], my)
    else:
        yr = np.nan
        mat = np.nan
    d = [{'Fit': 'S', 'L': res1.x[0], 'K': res1.x[1], 'TMax': res1.x[2], 'Year': yr, 'Maturity': mat}]
    df = pd.DataFrame(d)
    return df

# Input file
file_in = "OnShoreWindData.csv"  # Replace with your file name
x = re.search(r"(.+)\.csv$", file_in)
file_out = x.group(1) + "_filtered_fit.csv"

# Load data
df = pd.read_csv(file_in)

# Specify the list of countries and technologies to analyze
countries = [
    'AT', 'BE', 'BG', 'CH', 'CY', 'CZ', 'DE', 'DK', 'EE', 'ES', 'FI', 'FR', 'GR', 'HR',
    'HU', 'IE', 'IT', 'LT', 'LU', 'LV', 'MT', 'NL', 'PL', 'PT', 'RO', 'SE', 'SI', 'SK', 'GB', 'EU'
]
technology_column = 'Cap.Wind.On'  # Replace with the column for the desired technology
total_column = 'Gen.Total'  # Total electricity supply column

# Specify end year
end_year = 2023

# Identify countries out of the formative phase based on TES percentage
df_filtered_latest = df[df['Country'].isin(countries) & ~df['Gen.Wind.On'].isna() & ~df['Gen.Total'].isna()]
df_latest = df_filtered_latest.loc[df_filtered_latest.groupby('Country')['Year'].idxmax()]
df_latest['Percentage'] = (df_latest['Gen.Wind.On'] / df_latest['Gen.Total']) * 100

# Move Germany to the left and ensure it's colored orange
df_latest['Country'] = pd.Categorical(
    df_latest['Country'],
    categories=['DE'] + [c for c in df_latest['Country'] if c != 'DE'],
    ordered=True
)
df_latest = df_latest.sort_values('Country')

# Define bar colors
colors = [
    'orange' if country == 'DE' else 'green' if percentage >= 1 else 'red'
    for country, percentage in zip(df_latest['Country'], df_latest['Percentage'])
]

# Create bar plot
plt.figure(figsize=(12, 6))
plt.bar(df_latest['Country'], df_latest['Percentage'], color=colors)
plt.axhline(1, color='blue', linestyle='--', linewidth=1, label='1% Formative Phase Limit')
plt.xlabel('Country')
plt.ylabel('Percentage (%)')
plt.title('Percentage of Electricity Generated by Gen.Wind.On Compared to Gen.Total (Latest Year)')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()

# Save and show the plot
percentage_plot_file = "wind_on_vs_total_percentage_with_limit.png"
#plt.savefig(percentage_plot_file)
print(f"Percentage bar chart saved as '{percentage_plot_file}'")
plt.show()

# Exclude countries still in the formative phase
countries_out_of_formative_phase = df_latest[df_latest['Percentage'] >= 1]['Country'].tolist()
print(f"Countries out of formative phase: {countries_out_of_formative_phase}")

# Filter the data for countries out of the formative phase
df_filtered = df[df['Country'].isin(countries_out_of_formative_phase) & ~df[technology_column].isna()]

if df_filtered.empty:
    print("No data found for the selected countries and technology after filtering formative phase countries.")
else:
    # Prepare the data for the fitting process
    df_filtered = df_filtered[['Country', 'Year', technology_column, total_column]].rename(
        columns={technology_column: 'Value', total_column: 'Total'}
    )

    # Group data and apply the fitting function
    df3 = df_filtered.groupby(['Country'])[['Year', 'Value']].apply(lambda group: fit(group, end_year)).reset_index()

    # Merge with additional data and calculate derived metrics
    df4 = pd.merge(df3, df_filtered[['Country', 'Year', 'Total']], how="inner")

    df5 = df4.rename(columns={"Total": "Size"})
    df5['G'] = df5['K'] * df5['L'] / 4
    df5['G.Size'] = df5['G'] / df5['Size']
    df5['L.Size'] = df5['L'] / df5['Size']
    df5['dT'] = log(81) / df5['K']

    # Select final columns for output
    df6 = df5[['Country', 'Fit', 'L', 'L.Size', 'TMax', 'K', 'dT', 'G', 'G.Size', 'Maturity', 'Size']]

    # Save results to CSV
    df6.to_csv(file_out, index=False)
    print(f"Filtered results saved to {file_out}")

    # Reorder countries to place Germany and EU at the start
    df6['Country'] = pd.Categorical(df6['Country'], categories=['DE', 'EU'] + 
                                    [c for c in df6['Country'] if c not in ['DE', 'EU']])
    df6 = df6.sort_values('Country')

   # Bar chart: Germany and EU Highlighted
plt.figure(figsize=(12, 6))

# Define colors for countries
colors = [
    'orange' if country == 'DE' else 'lightgreen' if country == 'EU' else 'skyblue'
    for country in df6['Country']
]

# Plot maturity
plt.bar(df6['Country'], df6['Maturity'], color=colors)

# Add horizontal lines for stable growth limits
plt.axhline(0.5, color='blue', linestyle='--', linewidth=1, label='50% Stable Growth Lower Limit')
plt.axhline(0.9, color='green', linestyle='--', linewidth=1, label='90% Stable Growth Upper Limit')

# Add labels and title
plt.xlabel("Country")
plt.ylabel("Maturity (%)")
plt.title("Germany vs All Countries: Maturity Comparison (EU Highlighted)")
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()

# Save and show the plot
plot_file = "maturity_comparison_with_limits.png"
plt.savefig(plot_file)
print(f"Updated maturity plot saved as '{plot_file}'")
plt.show()

